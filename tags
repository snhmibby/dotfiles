!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
#TabsToolbar	userChrome.css	/^#TabsToolbar {$/;"	i
#nav-bar	userChrome.css	/^#nav-bar {$/;"	i
#nav-bar toolbarbutton	userChrome.css	/^#nav-bar toolbarbutton {$/;"	s
#sidebar-box[sidebarcommand="treestyletab_piro_sakura_ne_jp-sidebar-action"] #sidebar-header	userChrome.css	/^#sidebar-box[sidebarcommand="treestyletab_piro_sakura_ne_jp-sidebar-action"] #sidebar-header {$/;"	i
#sidebar-header	userChrome.css	/^#sidebar-header {$/;"	i
#urlbar	userChrome.css	/^#urlbar {$/;"	i
.sidebar-splitter	userChrome.css	/^.sidebar-splitter {$/;"	c
:root #urlbar	userChrome.css	/^[uidensity="compact"]:root #urlbar, [uidensity="compact"]:root .searchbar-textbox {$/;"	i
:root .searchbar-textbox	userChrome.css	/^[uidensity="compact"]:root #urlbar, [uidensity="compact"]:root .searchbar-textbox {$/;"	c
<C-b>	vimrc	/^  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(0)\\</;"	m
<C-b>	vimrc	/^  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<C-b>	vimrc	/^  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\\<C-b>"$/;"	m
<C-f>	vimrc	/^  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\\<c-r>=coc#float#scroll(1)\\</;"	m
<C-f>	vimrc	/^  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<C-f>	vimrc	/^  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\\<C-f>"$/;"	m
<C-h>	vimrc	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	vimrc	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	vimrc	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	vimrc	/^nnoremap <C-l> <C-w>l$/;"	m
<C-s>	vimrc	/^nmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-s>	vimrc	/^xmap <silent> <C-s> <Plug>(coc-range-select)$/;"	m
<C-t>	vimrc	/^nmap <C-t> <C-o>$/;"	m
<Leader>nt	vimrc	/^nmap <Leader>nt :NERDTreeToggle<cr>$/;"	m
<Leader>o	vimrc	/^nmap <Leader>o :exec CocActionAsync('showOutline')<cr>$/;"	m
<Leader>tb	vimrc	/^nmap <Leader>tb :TagbarToggle<cr>$/;"	m
<c-@>	vimrc	/^  inoremap <silent><expr> <c-@> coc#refresh()$/;"	m
<c-space>	vimrc	/^  inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	vimrc	/^inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()$/;"	m
<leader>a	vimrc	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>a	vimrc	/^xmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	vimrc	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>f	vimrc	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>f	vimrc	/^xmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	vimrc	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	vimrc	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<space>a	vimrc	/^nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	vimrc	/^nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	vimrc	/^nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	vimrc	/^nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	vimrc	/^nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>l	vimrc	/^nnoremap <silent><nowait> <space>l  :<C-u>CocList<cr>$/;"	m
<space>o	vimrc	/^nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	vimrc	/^nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>$/;"	m
<space>s	vimrc	/^nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Fold	vimrc	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	vimrc	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
K	vimrc	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	vimrc	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
[g	vimrc	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
\x1F	vimrc	/^nmap  <esc>:nohls<cr>$/;"	m
]g	vimrc	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
ac	vimrc	/^omap ac <Plug>(coc-classobj-a)$/;"	m
ac	vimrc	/^xmap ac <Plug>(coc-classobj-a)$/;"	m
af	vimrc	/^omap af <Plug>(coc-funcobj-a)$/;"	m
af	vimrc	/^xmap af <Plug>(coc-funcobj-a)$/;"	m
g:go_auto_sameids	vimrc	/^let g:go_auto_sameids = 0$/;"	v
g:go_code_completion_enabled	vimrc	/^let g:go_code_completion_enabled = 0$/;"	v
g:go_debug_mappings	vimrc	/^let g:go_debug_mappings = {$/;"	v
g:go_def_mapping_enabled	vimrc	/^let g:go_def_mapping_enabled = 0$/;"	v
g:go_def_reuse_buffer	vimrc	/^let g:go_def_reuse_buffer = 1$/;"	v
g:go_diagnostics_enabled	vimrc	/^let g:go_diagnostics_enabled = 0$/;"	v
g:go_doc_keywordprg_enabled	vimrc	/^let g:go_doc_keywordprg_enabled = 0$/;"	v
g:go_fmt_command	vimrc	/^let g:go_fmt_command = "goimports"$/;"	v
g:go_highlight_build_constraints	vimrc	/^let g:go_highlight_build_constraints = 1$/;"	v
g:go_highlight_extra_types	vimrc	/^let g:go_highlight_extra_types = 1$/;"	v
g:go_highlight_fields	vimrc	/^let g:go_highlight_fields = 1$/;"	v
g:go_highlight_function_calls	vimrc	/^let g:go_highlight_function_calls = 1$/;"	v
g:go_highlight_functions	vimrc	/^let g:go_highlight_functions = 1$/;"	v
g:go_highlight_generate_tags	vimrc	/^let g:go_highlight_generate_tags = 1$/;"	v
g:go_highlight_operators	vimrc	/^let g:go_highlight_operators = 1$/;"	v
g:go_highlight_types	vimrc	/^let g:go_highlight_types = 1$/;"	v
g:go_jump_to_error	vimrc	/^let g:go_jump_to_error = 0$/;"	v
g:go_metalinter_enabled	vimrc	/^let g:go_metalinter_enabled = []$/;"	v
gd	vimrc	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	vimrc	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	vimrc	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	vimrc	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
ic	vimrc	/^omap ic <Plug>(coc-classobj-i)$/;"	m
ic	vimrc	/^xmap ic <Plug>(coc-classobj-i)$/;"	m
if	vimrc	/^omap if <Plug>(coc-funcobj-i)$/;"	m
if	vimrc	/^xmap if <Plug>(coc-funcobj-i)$/;"	m
mapleader	vimrc	/^let mapleader = ","$/;"	v
mygroup	vimrc	/^augroup mygroup$/;"	a
s:check_back_space	vimrc	/^function! s:check_back_space() abort$/;"	f
s:show_documentation	vimrc	/^function! s:show_documentation()$/;"	f
uidensity	userChrome.css	/^[uidensity="compact"]:root #urlbar, [uidensity="compact"]:root .searchbar-textbox {$/;"	s
